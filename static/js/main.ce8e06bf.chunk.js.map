{"version":3,"sources":["Calendar/ViewYear.style.js","Calendar/constants.js","Calendar/ViewYear.js","App.js","serviceWorker.js","index.js"],"names":["YearContainer","styled","div","MonthsContainer","MonthNameWrapper","YearNameWrapper","MonthsWrapper","MonthNameContainer","props","isSelected","YearNameContainer","Container","MonthRow","DayName","p","disabledDay","css","today","DayNumber","isDisabled","isToDay","ShiftedDay","DaysViewHeaderContainer","MonthName","DaysContainer","YearName","ButtonsContainer","ButtonContainer","daysNamesAbbrev","monthsNames","CALENDAR_VIEWS","DISABLE_THIS_DAYS","ViewYear","useState","viewIndex","setViewIndex","Date","getFullYear","defaultYear","setDefaultYear","getMonth","monthIndex","setMonthIndex","years","i","push","onClick","style","margin","renderYears","map","monthName","idx","slice","numberOfDays","getDate","getNumberOfDaysInMonth","numberOfShiftedDays","indexOfFirstDayInMonth","getDay","shiftedDays","shiftedDay","getShiftLeadingDays","days","j","isDisabledDay","includes","toLocaleString","split","day","console","log","onDayClick","totalShiftsAndDays","NUMBER_MONTHS","dayName","renderDays","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce8e06bf.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\r\n\r\nexport const YearContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const MonthsContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const MonthNameWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const YearNameWrapper = styled(MonthNameWrapper)``;\r\n\r\nexport const MonthsWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: wrap;\r\n`;\r\n\r\nexport const MonthNameContainer = styled.div`\r\n    color: ${props => props.isSelected && '#ffff'};\r\n    background-color: ${props => props.isSelected && '#5a8ec2'};\r\n    cursor: pointer;\r\n    margin: 10px 0px;\r\n    display: flex;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n    width: 33%;\r\n    text-align: center;\r\n    border-radius: 8px;\r\n    height: 45px;\r\n    &:hover {\r\n        color: #fff;\r\n        background-color: #0A66C2;\r\n    }\r\n`;\r\n\r\nexport const YearNameContainer = styled(MonthNameContainer)`\r\n\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    width: 196px;\r\n    padding: 8px 20px;\r\n    position: absolute;\r\n    -webkit-filter: drop-shadow(0px 4px 16px rgba(0,0,0,0.16));\r\n    filter: drop-shadow(0px 4px 16px rgba(0,0,0,0.16));\r\n    background-color: #fff;\r\n    z-index: 2;\r\n    min-height: 270px;\r\n    overflow: auto;\r\n    box-shadow: 0px 4px 16px rgb(0 0 0 / 16%);\r\n    border-radius: 8px;\r\n    font-family: sans-serif;\r\n`;\r\nexport const MonthRow = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const DayName = styled.p`\r\n    margin: 0px;\r\n    width: 22px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst disabledDay = css`\r\n    color: #bcbcbc;\r\n`;\r\nconst today = css`\r\n    color: #ffff;\r\n`;\r\n\r\nexport const DayNumber = styled(DayName)`\r\n    cursor: ${props => !props.isDisabled && 'pointer'};\r\n    font-size: 14px;\r\n    font-weight: normal;\r\n    margin: 3px 0px;\r\n    width: 28px;\r\n    height: 28px;\r\n    vertical-align: middle;\r\n    line-height: 30px;\r\n    border-radius: 50%;\r\n    font-weight: ${props => props.isToDay && '600'};\r\n    background-color: ${props => props.isToDay && '#5a8ec2'};\r\n    ${props => props.isDisabled && disabledDay};\r\n    ${props => props.isToDay && today};\r\n    &:hover {\r\n        color: ${props => !props.isDisabled && '#fff'};\r\n        background-color: ${props => !props.isDisabled && '#0A66C2'};\r\n    }\r\n`;\r\n\r\nexport const ShiftedDay = styled.p`\r\n    margin: 3px 0px;\r\n    width: 28px;\r\n    height: 28px;\r\n    vertical-align: middle;\r\n    line-height: 30px;\r\n    border-radius: 50%;\r\n`;\r\n\r\nexport const DaysViewHeaderContainer = styled.div`\r\n    display: flex;\r\n    width: 170px;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const MonthName = styled.p`\r\n    font-family: sans-serif;\r\n    margin: 0px 25px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    margin: 0px 5px;\r\n    line-height: 29px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const DaysContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    justify-content: start;\r\n`;\r\n\r\nexport const MonthRowItem = styled.div``;\r\n\r\nexport const YearName = styled.p`\r\n    font-family: sans-serif;\r\n    margin: 0px 25px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    margin: 0px 5px;\r\n    line-height: 29px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 6px 0px;\r\n`;\r\nexport const ButtonContainer = styled.div`\r\n    font-family: sans-serif;\r\n    font-size: 13px;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n    margin: 0px 3px;\r\n    height: 30px;\r\n    &>p {\r\n        margin: 7px 0px;\r\n        text-align: center;\r\n    }\r\n`;","export const daysNamesAbbrev = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fri', 'Sa'];\r\nexport const daysNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nexport const monthsNames = [\r\n            'January', 'February', 'March', 'April',\r\n            'May', 'June', 'July', 'August', 'September',\r\n            'October', 'November', 'December'\r\n        ];\r\nexport const daySlots = [\r\n    '12:00 am',\r\n    '01:00 am','02:00 am',\r\n    '03:00 am','04:00 am',\r\n    '05:00 am','06:00 am',\r\n    '07:00 am','08:00 am',\r\n    '09:00 am','10:00 am',\r\n    '11:00 am','12:00 pm','01:00 pm',\r\n    '02:00 pm','03:00 pm',\r\n    '04:00 pm','05:00 pm',\r\n    '06:00 pm','07:00 pm',\r\n    '08:00 pm','09:00 pm',\r\n    '10:00 pm','11:00 pm',\r\n    '11:00 pm',\r\n];\r\n\r\nexport const NUMBER_MONTHS = 12;\r\n\r\nexport const VIEWS = {\r\n    YEAR: 0,\r\n    MONTH: 1,\r\n    WEEK: 2,\r\n    DAY: 3,\r\n};\r\n\r\nexport const data = {\r\n    2021 : {\r\n        1: {\r\n            1: [\r\n                {\r\n                    id: 123,\r\n                    appointment: \"Test\",\r\n                    from: '2021-01-01T03:00:00',\r\n                    to: '2021-01-01T04:30:00'\r\n                },\r\n        ]\r\n        },\r\n        2: {},\r\n        3: {},\r\n        4: {},\r\n        5: {},\r\n        6: {},\r\n        7: {\r\n            21: [{\r\n                id: 987,\r\n                appointment: \"Test\"\r\n            }]\r\n        },\r\n        8: {},\r\n        9: {},\r\n        10: {},\r\n        11: {},\r\n        12: {},\r\n    }\r\n};","import React, { useState } from 'react'\r\nimport { \r\n    Container, \r\n    MonthRow, \r\n    YearContainer, \r\n    MonthName, \r\n    DayName, \r\n    DayNumber, \r\n    DaysContainer, \r\n    MonthsContainer, \r\n    YearName,\r\n    ButtonsContainer,\r\n    ButtonContainer,\r\n    MonthsWrapper,\r\n    MonthNameContainer,\r\n    MonthNameWrapper,\r\n    DaysViewHeaderContainer,\r\n    ShiftedDay,\r\n    YearNameContainer,\r\n    YearNameWrapper,\r\n} from './ViewYear.style';\r\nimport { daysNamesAbbrev, monthsNames, NUMBER_MONTHS, data } from './constants';\r\n\r\nconst CALENDAR_VIEWS = {\r\n    YEARS: 0,\r\n    MONTHS: 1,\r\n    DAYS: 2,\r\n}\r\n\r\n\r\nconst DISABLE_THIS_DAYS = ['12/1/2021', '12/15/2021', '12/22/2021']\r\n\r\nconst ViewYear = () => {\r\n    const [viewIndex, setViewIndex] = useState(CALENDAR_VIEWS.DAYS);\r\n    const [defaultYear, setDefaultYear] = useState(new Date().getFullYear());\r\n    const [monthIndex, setMonthIndex] = useState(new Date().getMonth());\r\n\r\n    const onDayClick = day => {\r\n        console.log(`${monthIndex+1}/${day}/${defaultYear}`, \"MM/DD/YYYY\")\r\n    };\r\n\r\n    const onMonthInMonthViewClick = index => {\r\n        setMonthIndex(index);\r\n        setViewIndex(CALENDAR_VIEWS.DAYS);\r\n    };\r\n\r\n    const onMonthInDaysViewClick = index => {\r\n        setViewIndex(CALENDAR_VIEWS.MONTHS);\r\n    };\r\n\r\n    const setNextMonth = () => {\r\n        if (monthIndex < NUMBER_MONTHS - 1) {\r\n            setMonthIndex(monthIndex + 1)\r\n        } else {\r\n            setDefaultYear(defaultYear + 1)\r\n            setMonthIndex(0)\r\n        }\r\n    };\r\n\r\n    const setPrevMonth = () => {\r\n        if (monthIndex > 0) {\r\n            setMonthIndex(monthIndex - 1)\r\n        } else {\r\n            setDefaultYear(defaultYear - 1)\r\n            setMonthIndex(NUMBER_MONTHS - 1)\r\n        }\r\n    };\r\n\r\n    const onYearInDaysViewClick = () => {\r\n        setViewIndex(CALENDAR_VIEWS.YEARS);\r\n    }\r\n\r\n    const renderDays = () => {\r\n\r\n        const getNumberOfDaysInMonth = monthIndex => {\r\n            return new Date(defaultYear, monthIndex, 0).getDate();\r\n        };\r\n\r\n        const getShiftLeadingDays = monthIndex => {\r\n            const indexOfFirstDayInMonth = new Date(`${defaultYear}-${monthIndex}-01`).getDay();\r\n            const shiftedDays = [];\r\n            for (let i = 0; i < indexOfFirstDayInMonth; i++) {\r\n                const shiftedDay = (\r\n                    <ShiftedDay>{''}</ShiftedDay>\r\n                )\r\n                shiftedDays.push(shiftedDay);\r\n            }\r\n            return shiftedDays;\r\n        }\r\n        const numberOfDays = getNumberOfDaysInMonth(monthIndex+1);\r\n        const numberOfShiftedDays = getShiftLeadingDays(monthIndex+1);\r\n        const days = [];\r\n        for (let j = 0; j < numberOfDays; j++) {\r\n            const isDisabledDay = DISABLE_THIS_DAYS.includes(`${monthIndex+1}/${j+1}/${defaultYear}`);\r\n            const toDay = new Date().toLocaleString().split(',')[0];\r\n            const isToDay = toDay === `${monthIndex+1}/${j+1}/${defaultYear}`;\r\n            const day = (\r\n                    <DayNumber \r\n                        isDisabled={isDisabledDay} \r\n                        onClick={() => { if (!isDisabledDay) onDayClick(j+1)}} \r\n                        isToDay={isToDay}>{j+1}</DayNumber>\r\n                \r\n            )\r\n            days.push(day);\r\n        }\r\n\r\n        const totalShiftsAndDays = [...numberOfShiftedDays, ...days];\r\n\r\n        const month = (\r\n            <Container>\r\n                <ButtonsContainer>\r\n                    <ButtonContainer onClick={() => setPrevMonth()}>\r\n                        <p>{'<'}</p>\r\n                    </ButtonContainer>\r\n                    <DaysViewHeaderContainer>\r\n                        <MonthName onClick={() => onMonthInDaysViewClick()}>{monthsNames[monthIndex]}</MonthName>\r\n                        <YearName onClick={() => onYearInDaysViewClick()}>{defaultYear}</YearName>\r\n                    </DaysViewHeaderContainer>\r\n                    <ButtonContainer onClick={() => setNextMonth()}>\r\n                        <p>{'>'}</p>\r\n                    </ButtonContainer>\r\n                </ButtonsContainer>\r\n                <MonthRow>\r\n                    {daysNamesAbbrev.map(dayName => <DayName>{dayName}</DayName>)}\r\n                </MonthRow>\r\n                <DaysContainer>\r\n                    {totalShiftsAndDays}\r\n                </DaysContainer> \r\n            </Container>\r\n            );\r\n   \r\n        return month;\r\n    }\r\n\r\n    const renderMonths = () => (\r\n        <Container>\r\n            <MonthsWrapper>\r\n                {monthsNames.map((monthName, idx) => (\r\n                    <MonthNameContainer isSelected={monthIndex === idx} onClick={() => onMonthInMonthViewClick(idx)}>\r\n                        <MonthNameWrapper>\r\n                            <p style={{ margin: '0px' }}>{monthName.slice(0,3)}</p>\r\n                        </MonthNameWrapper>\r\n                    </MonthNameContainer>\r\n                ))}\r\n            </MonthsWrapper>\r\n        </Container>\r\n    );\r\n\r\n    const onYearInYearsViewClick = year => {\r\n        setDefaultYear(year);\r\n        setViewIndex(CALENDAR_VIEWS.MONTHS);\r\n    }\r\n\r\n    \r\n\r\n    const renderYears = () => {\r\n        const years = [];\r\n        for(let i = new Date().getFullYear() - 5; i < new Date().getFullYear() + 7; i++) {\r\n            years.push(\r\n                <YearNameContainer isSelected={defaultYear === i} onClick={() => onYearInYearsViewClick(i)}>\r\n                        <YearNameWrapper>\r\n                            <p style={{ margin: '0px' }}>{i}</p>\r\n                        </YearNameWrapper>\r\n                </YearNameContainer>\r\n            )\r\n          }\r\n\r\n        return(\r\n        <Container>\r\n            <MonthsWrapper>\r\n                {years}\r\n            </MonthsWrapper>\r\n        </Container>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <YearContainer>\r\n            <MonthsContainer>\r\n                {CALENDAR_VIEWS.YEARS === viewIndex && renderYears()}\r\n                {CALENDAR_VIEWS.MONTHS === viewIndex && renderMonths()}\r\n                {CALENDAR_VIEWS.DAYS === viewIndex && renderDays()}\r\n            </MonthsContainer>\r\n            \r\n        </YearContainer>\r\n    )\r\n}\r\n\r\nexport default ViewYear;","import React from 'react';\nimport DatePicker from './Calendar';\nimport './App.css'\n\nconst App = ({ ...props }) => {\n    return (\n        <div>\n            <DatePicker />\n         </div>\n                \n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}